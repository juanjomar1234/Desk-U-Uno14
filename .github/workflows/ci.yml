name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      CI: true
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
      NEXTAUTH_SECRET: "test-secret"
      NEXTAUTH_URL: "http://localhost:3000"
      JWT_SECRET: "test-jwt-secret"
      NODE_ENV: "test"

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npx prisma generate
      
    - name: Run migrations
      run: npx prisma migrate deploy
      
    - name: Run tests
      run: npm test -- --ci --coverage
      
    - name: Build project
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npx prisma generate
        
    - name: Build
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}

    - name: Create configuration files
      run: |
        # Crear .env
        echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" > .env
        echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
        echo "NODE_ENV=production" >> .env
        echo "PORT=3000" >> .env

        # Crear server.js
        cat > server.js << 'EOL'
        const path = require('path')
        const { createServer } = require('http')
        const { parse } = require('url')
        const next = require('next')

        const dev = process.env.NODE_ENV !== 'production'
        const app = next({ dev })
        const handle = app.getRequestHandler()

        app.prepare().then(() => {
          createServer((req, res) => {
            const parsedUrl = parse(req.url, true)
            const { pathname } = parsedUrl

            if (pathname === '/') {
              res.writeHead(302, { Location: '/login' })
              res.end()
              return
            }

            handle(req, res, parsedUrl)
          }).listen(process.env.PORT || 3000, (err) => {
            if (err) throw err
            console.log(`> Ready on http://localhost:${process.env.PORT || 3000}`)
          })
        })
        EOL

        # Crear ecosystem.config.js
        cat > ecosystem.config.js << 'EOL'
        module.exports = {
          apps: [{
            name: 'next-app',
            script: 'server.js',
            instances: 1,
            autorestart: true,
            watch: false,
            max_memory_restart: '1G',
            env: {
              NODE_ENV: 'production',
              PORT: 3000
            }
          }]
        }
        EOL

        # Verificar que los archivos existen
        ls -la .env server.js ecosystem.config.js package.json

    - name: ðŸ“‚ Deploy .next directory
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        server: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 65002
        local_path: '.next'
        remote_path: ${{ secrets.DEPLOY_PATH }}
        sftp_only: true
        sftpArgs: '-o StrictHostKeyChecking=no'
        delete_remote_files: true

    - name: ðŸ“‚ Deploy server.js
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        server: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 65002
        local_path: 'server.js'
        remote_path: ${{ secrets.DEPLOY_PATH }}/server.js
        sftp_only: true
        sftpArgs: '-o StrictHostKeyChecking=no'
        delete_remote_files: false

    - name: ðŸ“‚ Deploy ecosystem.config.js
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        server: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 65002
        local_path: 'ecosystem.config.js'
        remote_path: ${{ secrets.DEPLOY_PATH }}/ecosystem.config.js
        sftp_only: true
        sftpArgs: '-o StrictHostKeyChecking=no'
        delete_remote_files: false

    - name: ðŸ“‚ Deploy package.json
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        server: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 65002
        local_path: 'package.json'
        remote_path: ${{ secrets.DEPLOY_PATH }}/package.json
        sftp_only: true
        sftpArgs: '-o StrictHostKeyChecking=no'
        delete_remote_files: false

    - name: ðŸ“‚ Deploy .env
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        server: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 65002
        local_path: '.env'
        remote_path: ${{ secrets.DEPLOY_PATH }}/.env
        sftp_only: true
        sftpArgs: '-o StrictHostKeyChecking=no'
        delete_remote_files: false