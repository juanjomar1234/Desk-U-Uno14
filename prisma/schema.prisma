// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Modelo de usuario
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  image         String?
  role          String?   @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  messages      Message[]
  files         File[]
  tasks         Task[]
  events        Event[]
  contacts      Contact[]
  boards        Board[]
  lists         List[]
  cards         Card[]
  logs          Log[]
}

// Modelo de mensaje
model Message {
  id            String    @id @default(cuid())
  content       String
  status        String    @default("sent")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  sender        User      @relation(fields: [senderId], references: [id])
  senderId      String
  recipientId   String
}

// Modelo de archivo
model File {
  id            String    @id @default(cuid())
  name          String
  path          String
  mimeType      String
  size          Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String
}

// Modelo de tarea
model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  status        String    @default("PENDING")
  priority      String    @default("MEDIUM")
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String
  assigneeId    String?
}

// Modelo de evento de calendario
model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String
}

// Modelo de contacto
model Contact {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  company       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String
}

// Modelo de tablero Kanban
model Board {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String
  columns       Column[]
}

// Modelo de columna de tablero
model Column {
  id            String    @id @default(cuid())
  name          String
  position      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  board         Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId       String
  cards         Card[]
}

// Modelo de tarjeta
model Card {
  id            String    @id @default(cuid())
  title         String
  description   String?
  position      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  column        Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId      String
  assignee      User?     @relation(fields: [assigneeId], references: [id])
  assigneeId    String?
}

// Modelo de lista
model List {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String
  items         ListItem[]
}

// Modelo de elemento de lista
model ListItem {
  id            String    @id @default(cuid())
  content       String
  completed     Boolean   @default(false)
  position      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  list          List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId        String
}

// Modelo de log
model Log {
  id            String    @id @default(cuid())
  level         String
  message       String
  metadata      String?
  source        String
  timestamp     DateTime  @default(now())
  
  // Relaciones
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
}
